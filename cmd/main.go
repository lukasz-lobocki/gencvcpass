package cmd

import (
	crand "crypto/rand"
	"fmt"
	"log"
	"math/big"
	mrand "math/rand"
	"os"
	"strings"
	"unicode"

	"github.com/fatih/color"
	"github.com/spf13/cobra"
)

var (
	semVer      string
	commitHash  string
	isGitDirty  string
	isSnapshot  string
	goOs        string
	goArch      string
	gitUrl      string
	builtBranch string
	builtDate   string
)

var config tConfig // Holds configuration.

var semReleaseVersion string = semVer +
	func(pre string, txt string) string {
		if len(txt) > 0 {
			return pre + txt
		} else {
			return ""
		}
	}("+", goArch) +
	func(pre string, txt string) string {
		if len(txt) > 0 {
			return pre + txt
		} else {
			return ""
		}
	}(".", builtBranch) +
	func(pre string, txt string) string {
		if len(txt) > 0 {
			return pre + txt
		} else {
			return ""
		}
	}(".", commitHash)

var rootCmd = &cobra.Command{
	Use:               "gencvcpass",
	Args:              cobra.NoArgs,
	Short:             "Generates CVC password.",
	Long:              `Generates consonant-vowel-consonant patterned password.`,
	Version:           semReleaseVersion,
	DisableAutoGenTag: true, // Do not add footer to autogenerated help.

	CompletionOptions: cobra.CompletionOptions{HiddenDefaultCmd: true},

	// Uncomment the following line if your bare application
	// has an action associated with it:
	Run: func(cmd *cobra.Command, args []string) { main() },
}

var (
	loggingLevel int         // Global logging level, see MAX_LOGGING_LEVEL.
	logInfo      *log.Logger // Blue logger, for info.
	logWarning   *log.Logger // Yellow logger, for warning.
	logError     *log.Logger // Red logger, for error.
)

// Execute adds all child commands to the root command and sets flags appropriately.
// This is called by main.main(). It only needs to happen once to the rootCmd.
func Execute() {
	err := rootCmd.Execute()
	if err != nil {
		os.Exit(1)
	}
}

func init() {
	initLoggers()

	rootCmd.PersistentFlags().IntVar(&loggingLevel, "logging", 0, // Adding global ie. persistent logging level flag.
		fmt.Sprintf("logging level [0...%d] (default 0)", MAX_LOGGING_LEVEL))

	rootCmd.Flags().IntVarP(&config.setsNum, "sets", "s", 5, "number of sets between separators")
	rootCmd.Flags().IntVarP(&config.upperNum, "upper", "u", 2, "number of uppercase letters")
	rootCmd.Flags().IntVarP(&config.digitsNum, "digits", "d", 2, "number of digits")
	rootCmd.Flags().StringVar(&config.separator, "sep", "-", "separator character")

	// Hide help command.
	rootCmd.SetHelpCommand(&cobra.Command{Hidden: true})
	//Do not sort flags.
	rootCmd.Flags().SortFlags = false
	//Do not sort commands.
	cobra.EnableCommandSorting = false
}

func main() {
	cvcsString, err := getCVCsString(config.setsNum)
	if err != nil {
		logError.Fatalln(err)
	}
	if loggingLevel >= 2 {
		logInfo.Printf("cvcsString = %s", cvcsString)
	}
	passString, err := swapUpperAndDigits(cvcsString, config.setsNum, config.upperNum, config.digitsNum)
	if err != nil {
		logError.Fatalln(err)
	}
	if loggingLevel >= 2 {
		logInfo.Printf("passString = %s", passString)
	}
	chunks, err := SplitIntoChunks(passString, CHUNKSIZE)
	if err != nil {
		logError.Fatalln(err)
	}
	if loggingLevel >= 2 {
		logInfo.Printf("chunks = %v", chunks)
	}
	password := strings.Join(chunks, config.separator)
	fmt.Println(password)
}

func getRandomSlice(s []int, n int) (seq []int) {
	mrand.Shuffle(len(s), func(i, j int) {
		s[i], s[j] = s[j], s[i]
	})
	return s[:n]
}

func getCVCsString(setsNum int) (cvcsString string, err error) {
	for i := 1; i <= (setsNum * 2); i++ { // times 2 for each chunk to be CVCCVC
		cvc, err := getCVC()
		if err != nil {
			return "", err
		}
		cvcsString += cvc
	}
	return cvcsString, nil
}

// swapUpperAndDigits replaces a given number of unique random characters
// in a string with their uppercase equivalents and digits.
func swapUpperAndDigits(s string, setsNum int, countUpper int, countDigits int) (string, error) {
	// Validate input.
	if countUpper < 0 || countUpper > setsNum*2 {
		return "", fmt.Errorf("count of upper [%d] must be between 0 and double number of sets [%d]", countUpper, setsNum*2)
	}
	if countDigits < 0 || countDigits > setsNum*2 {
		return "", fmt.Errorf("count of digits [%d] must be between 0 and double number of sets [%d]", countDigits, setsNum*2)
	}

	upper := func(x int) int {
		return 6*x - 6 // every 1st character of cvc tripplet -1 to account for slice indices
	}
	digits := func(x int) int {
		return 6*x - 4 // every 3rd character of cvc tripplet -1 to account for slice indices
	}
	upperSlice := getSlice(upper, setsNum)
	upperSlice = getRandomSlice(upperSlice, countUpper)
	digitSlice := getSlice(digits, setsNum)
	digitSlice = getRandomSlice(digitSlice, countDigits)

	runes := []rune(s)

	// Loop through UPPER indices
	for _, element := range upperSlice {
		runes[element] = unicode.ToUpper(runes[element])
	}

	// Loop through DIGITS indices
	for _, element := range digitSlice {
		randomDigitIndex, err := crand.Int(crand.Reader, big.NewInt(int64(len(DIGITS))))
		if err != nil {
			return "", err
		}
		randomDigit := DIGITS[int(randomDigitIndex.Int64())]
		runes[element] = rune(randomDigit)
	}
	return string(runes), nil
}

// SplitIntoChunks divides a string into chunks of a given size.
func SplitIntoChunks(s string, chunkSize int) (chunks []string, err error) {

	if chunkSize <= 0 {
		return chunks, fmt.Errorf("size of a chunk must be greater than 0")
	}

	for i := 0; i < len(s); i += chunkSize {
		end := min(i+chunkSize, len(s))
		chunks = append(chunks, s[i:end])
	}
	return chunks, nil
}

// getCVC returns random consonant-vowel-consonant string
func getCVC() (cvc string, err error) {

	var (
		useConsonant bool // true for consonant, false for vowel
	)

	for i := 1; i <= 3; i++ { //3-letter CVC
		var charSet string
		useConsonant = !useConsonant // Alternate between consonant and vowel
		if useConsonant {
			charSet = CONSONANTS
		} else {
			charSet = VOWELS
		}

		// Use crypto/rand for secure random number generation.
		randomIndex, err := crand.Int(crand.Reader, big.NewInt(int64(len(charSet))))
		if err != nil {
			return "", err
		}
		idx := int(randomIndex.Int64())

		char := string(charSet[idx])
		cvc += char

	}
	return cvc, nil

}

func compute(op operation, a int) int {
	return op(a)
}

func getSlice(f operation, setsNum int) (seq []int) {
	for i := 1; i <= setsNum; i++ {
		term := compute(f, i)
		seq = append(seq, term)
		seq = append(seq, term+3) //3-letter CVC
	}
	return seq
}

func initLoggers() {
	hiCyan := color.New(color.FgHiCyan).SprintFunc()
	hiYellow := color.New(color.FgHiYellow).SprintFunc()
	hiRed := color.New(color.FgHiRed).SprintFunc()

	logInfo = log.New(os.Stderr, hiCyan("╭info\n╰"), 0)
	logWarning = log.New(os.Stderr, hiYellow("╭warning\n╰"), 0)
	logError = log.New(os.Stderr, hiRed("╭error\n╰"), 0)
}
